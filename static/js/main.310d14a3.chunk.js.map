{"version":3,"sources":["components/Container/Container.jsx","redux/contact/contact-actions.js","redux/contact/contact-operations.js","redux/contact/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.js","components/Filter/Filter.jsx","App.js","redux/contact/contact-reducer.js","redux/store.js","index.js"],"names":["Container","children","className","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","changeFilter","axios","defaults","baseURL","getLoading","state","contacts","loading","getError","error","getAllContacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","ContactForm","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","find","alert","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","id","Component","connect","dispatch","data","a","post","operations","ContactList","onDeleteContacts","map","onClick","delete","deleteContacts","e","target","App","fetchContacts","isError","isLoadingcontacts","color","height","width","get","createReducer","_","payload","actions","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.310d14a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Container.modules.css';\r\n\r\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactsRequest = createAction('contacts/addContactsRequest');\r\nexport const addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nexport const addContactsError = createAction('contacts/addContactsError');\r\n\r\n\r\nexport const deleteContactsRequest = createAction(\r\n  'contacts/deleteContactsRequest',\r\n);\r\nexport const deleteContactsSuccess = createAction(\r\n  'contacts/deleteContactsSuccess',\r\n);\r\nexport const deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n\r\naxios.defaults.baseURL = ' http://localhost:3004';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts')\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error){dispatch(fetchContactsError(error))}\r\n};\r\n\r\nexport const addContacts = ({ name, number }) => async dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactsRequest());\r\n\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactsSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactsError(error));\r\n    }\r\n};\r\n\r\nexport const deleteContacts = id => async dispatch => {\r\n  dispatch(deleteContactsRequest());\r\n\r\n   try {\r\n     const responce = await axios.delete(`/contacts/${id}`);\r\n     dispatch(deleteContactsSuccess(id));\r\n   } catch (error) {\r\n     dispatch(deleteContactsError(error));\r\n   }\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getError = state => state.contacts.error;\r\n\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizeFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizeFilter),\r\n    );\r\n  },\r\n);\r\n\r\n// export const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getAllContacts(state);\r\n\r\n//   const normalizeFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizeFilter),\r\n//   );\r\n// };\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport * as operations from '../../redux/contact/contact-operations';\r\nimport { getAllContacts } from '../../redux/contact/contacts-selectors';\r\n\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const unavailableName = this.props.contacts.find(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n    if (unavailableName) {\r\n      alert(`${this.state.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            id={this.nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: data => dispatch(operations.addContacts(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\n\r\nconst ContactList = ({ contacts, onDeleteContacts }) =>\r\n  contacts !== [] ? (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: <span>{number}</span>\r\n          <button onClick={() => onDeleteContacts(id)}>Delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  ) : null;\r\n\r\nexport default ContactList;\r\n\r\n","import { connect } from 'react-redux';\r\nimport { deleteContacts } from '../../redux/contact/contact-operations';\r\nimport ContactList from './ContactList';\r\nimport { getVisibleContacts } from '../../redux/contact/contacts-selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContacts: id => dispatch(deleteContacts(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeFilter } from '../../redux/contact/contact-actions';\r\nimport { getFilter } from '../../redux/contact/contacts-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div>\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport Container from './components/Container/Container';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport { fetchContacts } from './redux/contact/contact-operations';\r\nimport { getLoading, getError } from './redux/contact/contacts-selectors';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <h1>Phonebook</h1>\r\n\r\n          {this.props.isError && <h1>Sorry, please try later</h1>}\r\n        \r\n          <ContactForm />\r\n\r\n          <h2>Contacts</h2>\r\n\r\n          <Filter />\r\n          {this.props.isLoadingcontacts && (\r\n            <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n          )}\r\n          <ContactList />\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingcontacts: getLoading(state),\r\n  isError: getError(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  changeFilter,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactsSuccess]: (state, actions) => [...state, actions.payload],\r\n  [deleteContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [deleteContactsError]: () => false,\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactsRequest]: () => true,\r\n  [addContactsSuccess]: () => false,\r\n  [addContactsError]: () => false,\r\n  [deleteContactsRequest]: () => true,\r\n  [deleteContactsSuccess]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contact/contact-reducer';\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts:\r\n      // persistReducer(contactsPersistConfig,\r\n        contactsReducer\r\n      // ),\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: middleware,\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './styles.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n        <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}